#include "devMotors.h"






//-------------------------------------------------------------------------------------//
/*
#define PWM0A	IO_D6
#define	PWM0B	IO_D5
#define PWM2A	IO_B3
#define PWM2B	IO_D3
*/
//-------------------------------------------------------------------------------------//







/* //===================================================================================*
* //                                                                                    *
* // Constructor																		*
* //------------------------------------------------------------------------------------*
*///
AMotors :: AMotors ()
	:
	m_motor1(0),
	m_motor2(0)
{


}
//-------------------------------------------------------------------------------------//









/* //===================================================================================*
* //                                                                                    *
* // Инциализация железа																*
* //------------------------------------------------------------------------------------*
*///
void AMotors :: initialization()
{
	DDRB = (DDRB & ~0x08) | 0x08; //Сконфигурировали порт на выход (поставили лог 1)
	DDRD = (DDRD & ~0x68) | 0x68; //3 5 6 порты


	// configure for inverted fast PWM output on motor control pins:
	//  set OCxx on compare match, clear on timer overflow
	//  Timer0 and Timer2 counts up from 0 to 255 and then overflows directly to 0
	TCCR0A = 0xF3;
	TCCR2A = 0xF3;
	
	// use the system clock/8 (=2.5 MHz) as the timer clock,
	// which will produce a PWM frequency of 10 kHz
	TCCR0B = 0x02;
	TCCR2B = 0x02;
	
	
	// initialize all PWMs to 0% duty cycle (braking)
	OCR0A = 0;
	OCR0B = 0;
	OCR2A = 0;
	OCR2B = 0;


}
//-------------------------------------------------------------------------------------//






/* //===================================================================================*
* //                                                                                    *
* // Устанавливаем скорость движения левого двигателя									*
* //------------------------------------------------------------------------------------*
*///
void AMotors :: setSpeedM1(const int iSpeed)
{
	m_motor1 = correct(iSpeed);
	if (m_motor1 < 0)
	{
		//Крутим двигатель назад
		OCR0B = -m_motor1;	// pwm one driver input
		OCR0A = 0;		// hold the other driver input high
	}
	else
	{
		// Крутив в перед
		OCR0B = 0;			// hold one driver input high
		OCR0A = m_motor1;	// pwm the other input
	}
}
//-------------------------------------------------------------------------------------//






/* //===================================================================================*
* //                                                                                    *
* // Устанавливаем скорость движения ПРАВОГО двигателя									*
* //------------------------------------------------------------------------------------*
*///
void AMotors :: setSpeedM2(const int iSpeed)
{
	m_motor2 = correct(iSpeed);
	if (m_motor2 < 0)
	{
		//Крутим двигатель назад
		OCR2B = -m_motor2;	// pwm one driver input
		OCR2A = 0;			// hold the other driver input high
	}
	else
	{
		// Крутив в перед
		OCR2B = 0;			// hold one driver input high
		OCR2A = m_motor2;	// pwm the other input
	}
}
//-------------------------------------------------------------------------------------//






/* //===================================================================================*
* //                                                                                    *
* // устанавливаем корректность диапазаона моторов										*
* //------------------------------------------------------------------------------------*
*///
int AMotors :: correct(const int iSpeed) const
{
	return iSpeed > 255 ? 255 : iSpeed < -255 ? -255 : iSpeed;
}
//-------------------------------------------------------------------------------------//






/* //===================================================================================*
* //                                                                                    *
* // Возвратим скорость мотора 1														*
* //------------------------------------------------------------------------------------*
*///
int AMotors :: getSpeedM1() const
{
	return m_motor1;
}
//-------------------------------------------------------------------------------------//






/* //===================================================================================*
* //                                                                                    *
* // Возвратим скорость мотора 2														*
* //------------------------------------------------------------------------------------*
*///
int AMotors :: getSpeedM2() const
{
	return m_motor2;
}


