#include "devTime.h"
#include <avr/io.h>
#include <avr/interrupt.h>
//---------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* // Прерывание таймера																	*
* //------------------------------------------------------------------------------------*
*///
volatile DWORD _timerTick = 0;
ISR(TIMER1_COMPA_vect)
{
	_timerTick++;
	OCR1A += TIME_OCR_TICK;
}
//---------------------------------------------------------------------------------------










/* //===================================================================================*
* //                                                                                    *
* // Constructor																		*
* //------------------------------------------------------------------------------------*
*///
ATime :: ATime()
	:
	m_dwLastTick(0),
	m_elapsed(0)
{
	
}
//---------------------------------------------------------------------------------------









/* //===================================================================================*
* //                                                                                    *
* // инциализация времени																*
* //  Этот режим настраивает таймер для управления сервами                              *
* //  и тактирование внутренних часов                                                   *
* //------------------------------------------------------------------------------------*
*///
void ATime :: initialization()
{
	TIFR1	= 0xFF;
	TCCR1A	= 0;
	TCCR1B	= (0 << CS12) | (1 << CS11) | (1 << CS10); //делитель на 64
	TIMSK1	= (1 << OCIE1A) | (1 << OCIE1B); //запускаем перрывания 
	
	OCR1A	= TIME_OCR_TICK;
	OCR1B	= TIME_OCR_SERVO;
}
//---------------------------------------------------------------------------------------





	



/* //===================================================================================*
* //                                                                                    *
* // Возвратим текущее время															*
* //------------------------------------------------------------------------------------*
*///
DWORD ATime :: getTime() const
{
	return _timerTick;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* // возвратим текущнн время в милискундах												*
* //------------------------------------------------------------------------------------*
*///
DWORD ATime :: getTimeMS() const
{
	return _timerTick * 10;
}
//---------------------------------------------------------------------------------------









/* //===================================================================================*
* //                                                                                    *
* // Начало выполнения нового кадра														*
* //------------------------------------------------------------------------------------*
*///
void ATime :: update()
{
	m_elapsed = _timerTick - m_dwLastTick;
	m_dwLastTick = _timerTick;
}
//---------------------------------------------------------------------------------------





/* //===================================================================================*
* //                                                                                    *
* // время прошедшее с последнего обновления											*
* //------------------------------------------------------------------------------------*
*///
WORD ATime :: elapsed() const
{
	return m_elapsed;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* // возвратим значение времени в милисекундах											*
* //------------------------------------------------------------------------------------*
*///
int ATime :: fromMS(const int ms)
{
	return ms / 10;
}