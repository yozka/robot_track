#include "liteString.h"
#include "resource.h"
//---------------------------------------------------------------------------------------





/* //===================================================================================*
* //                                                                                    *
* //  длина строки					               										*
* //------------------------------------------------------------------------------------*
*///
int strLength(const char *s)
{
	int i = 0;
	if (s)
	{
		while (*s)
		{
			s++;
			i++;
		}
	}
	return i;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* //  переводим число в строчку		               										*
* //------------------------------------------------------------------------------------*
*///
void strFromInt(char *s, const int intValue)
{
	int iVal = intValue;
	if (intValue < 0)
	{
		iVal = -iVal;
	}

	if (!iVal)
	{
		strCopy(s, '0');
	}
	else
	{
		char chSymbol = '0';
		while (iVal)
		{
			int i = iVal % 10;
			iVal = iVal / 10;

			chSymbol = '0' + i;
			strRevcat(s, &chSymbol, 1);
		}
		if (intValue < 0)
		{
			chSymbol = '-';
			strRevcat(s, &chSymbol, 1);
		}			
	}		
}	
//---------------------------------------------------------------------------------------






/* //===================================================================================*
* //                                                                                    *
* //  число в строчку с учетом разделителя		  										*
* //------------------------------------------------------------------------------------*
*///
void strFromIntDigit(char *s, const int intValue, const BYTE digit)
{
	char chSymbol = '0';
	int dCount = 0;
	int iVal = intValue;
	if (intValue < 0)
	{
		iVal = -iVal;
	}

	if (!iVal)
	{
		strCopy(s, '0');
		dCount++;
	}
	else
	{

		while (iVal)
		{
			if (digit == dCount)
			{
				chSymbol = '.';
				strRevcat(s, &chSymbol, 1);
			}
			dCount++;

			int i = iVal % 10;
			iVal = iVal / 10;

			chSymbol = '0' + i;
			strRevcat(s, &chSymbol, 1);
		}
	}
	
	//число очень маленькое, нужно проставить 000
	if (dCount <= digit)
	{
		chSymbol = '0';
		while (dCount < digit)
		{
			strRevcat(s, &chSymbol, 1);
			dCount++;
		}
		
		chSymbol = '.';
		strRevcat(s, &chSymbol, 1);
		chSymbol = '0';
		strRevcat(s, &chSymbol, 1);

	}
	if (intValue < 0)
	{
		chSymbol = '-';
		strRevcat(s, &chSymbol, 1);
	}

}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* //  переводим число в строчку		               										*
* //------------------------------------------------------------------------------------*
*///
void strFromDWORD(char *s, const DWORD dwValue)
{
	DWORD dwVal = dwValue;
	if (!dwVal)
	{
		strCopy(s, '0');
	}
	else
	{
		while (dwVal)
		{
			int i = dwVal % 10;
			dwVal = dwVal / 10;

			char chSymbol = '0' + i;
			strRevcat(s, &chSymbol, 1);
		}
	}
}
//---------------------------------------------------------------------------------------






/* //===================================================================================*
* //                                                                                    *
* //  копирование строки					               								*
* //------------------------------------------------------------------------------------*
*///
void strCopy(char *sDest, const char *s, const int len)
{
	if (!sDest || !s)
	{
		return;
	}
	for (int i = 0; i < len; i++)
	{
		*sDest++ = *s++;
	}
	*sDest = 0;
}
//---------------------------------------------------------------------------------------





/* //===================================================================================*
* //                                                                                    *
* //  копирование строки					               								*
* //------------------------------------------------------------------------------------*
*///
void strCopy(char *sDest, const char s)
{
	if (!sDest)
	{
		return;
	}
	*sDest++ = s;
	*sDest = 0;
}
//---------------------------------------------------------------------------------------










/* //===================================================================================*
* //                                                                                    *
* //  копирование строки					               								*
* //------------------------------------------------------------------------------------*
*///
void strCopy(char *sDest, const char *s)
{
	if (!sDest || !s)
	{
		return;
	}
	const int len = strLength(s);
	for (int i = 0; i < len; i++)
	{
		*sDest++ = *s++;
	}
	*sDest = 0;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* //  реверсивное объеденение (добавление с переди         								*
* //------------------------------------------------------------------------------------*
*///
void strRevcat(char *sDest, const char *s, const int len)
{
	if (!sDest || !s)
	{
		return;
	}

	int iLenDest = strLength(sDest);
	char * sDestS = sDest + iLenDest - 1;
	char * sDestD = sDestS + len;
	*sDestD = 0;
	for (int i = 0; i < iLenDest; i++)
	{
		*sDestD-- = *sDestS--;
	}


	for (int i = 0; i < len; i++)
	{
		*sDest++ = *s++;
	}
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* //  проверка на совпадение строк					      								*
* //------------------------------------------------------------------------------------*
*///
bool strCompare(const char *s1, const char *s2)
{
	const int len1 = strLength(s1);
	const int len2 = strLength(s2);
	if (len1 != len2 || !len1)
	{
		return false;
	}
	while (*s1)
	{
		if (*s1 != *s2)
		{
			return false;
		}
		s1++;
		s2++;
	}
	return true;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* //  копирование строки из памяти программы		      								*
* //------------------------------------------------------------------------------------*
*///
void strCopyPgm(char *sDest, const char *sPgm)
{
	char temp = 0;
	do
	{
		temp = pgm_read_byte(sPgm);
		*sDest = temp;
		sPgm++;
		sDest++;
	}
	while (temp);
}
//---------------------------------------------------------------------------------------





/* //===================================================================================*
* //                                                                                    *
* //  проверка на совпадение строк данные береутся из программной памяти				*
* //------------------------------------------------------------------------------------*
*///
bool strComparePgm(const char *s, const char *sPgm)
{
	while (*s)
	{
		BYTE temp = pgm_read_byte(sPgm);
		if (*s != temp)
		{
			return false;
		}
		s++;
		sPgm++;
	}
	return pgm_read_byte(sPgm) == 0 ? true : false;
}
//---------------------------------------------------------------------------------------









/* //===================================================================================*
* //                                                                                    *
* //  преоброзование строчки в число				      								*
* //------------------------------------------------------------------------------------*
*///
int strToInt(const char *s, bool * error)
{
	if (error)
	{
		*error = false;
	}
	bool minus = false;
	int ret = 0;
	int iDigit = 1;
	int iCount= strLength(s) - 1;
	for (int i = iCount; i >= 0 ; i--)
	{
		int szChar = s[i];
		int iChar = szChar - '0';
		if (iChar >=0 && iChar <=9)
		{
			ret += iChar * iDigit;
			iDigit *= 10;
		}
		else
		if (szChar == '-')
		{
			minus = true;
		}
		else
		if (szChar != ' ' && error)
		{
			*error = true;
		}
	}
	
	if (minus)
	{
		ret = -ret;
	}
	return ret;
}




/* //===================================================================================*
* //                                                                                    *
* //  преоброзование строчки в число				      								*
* //------------------------------------------------------------------------------------*
*///
int hexToInt(const char *s, bool * error)
{
	if (error)
	{
		*error = false;
	}
	int myint = 0;
	const int count = strLength(s);
	for(int i = 0; i < count; ++i)
	{
		BYTE data = *s++;
		if ((data >= '0' && data <='9')||(data >= 'A' && data <='F'))
		{
			myint = (myint << 4) + ( data < 'A' ?  data - '0' : data - 'A' + 10);
		}
		else
		{	
			if (error)
			{
				*error = true;
			}
		}			
			
	}		
	return myint;
}	