#include "slvDisplay.h"
//---------------------------------------------------------------------------------------



//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* // Constructor																		*
* //------------------------------------------------------------------------------------*
*///
ADisplay :: ADisplay()
	:
	graphics(NULL)
{
	
}
//---------------------------------------------------------------------------------------





/* //===================================================================================*
* //                                                                                    *
* // инциализация дисплея																*
* //------------------------------------------------------------------------------------*
*///
void ADisplay :: initialization(AHardware &hardware)
{
	graphics = &hardware.ledMatrix;
	
	hardware.ledMatrix.setLine(0, 0b00000000);
	hardware.ledMatrix.setLine(1, 0b00100100);
	hardware.ledMatrix.setLine(2, 0b00100100);
	hardware.ledMatrix.setLine(3, 0b00000000);
	hardware.ledMatrix.setLine(4, 0b00000000);
	hardware.ledMatrix.setLine(5, 0b01000010);
	hardware.ledMatrix.setLine(6, 0b00111100);
	hardware.ledMatrix.setLine(7, 0b00000000);
	

	x = 0;
	y = 0;
	delay = 0;
}
//---------------------------------------------------------------------------------------







/* //===================================================================================*
* //                                                                                    *
* // обновление дисплея																	*
* //------------------------------------------------------------------------------------*
*///
void ADisplay :: update(const ATime &time, AHardware &hardware)
{
	const int speed = 1000;
	delay += time.elapsed();
	if (delay > speed)
	{
		delay -= speed;
		x++;
		if (x > 8)
		{
			x = 0;
		}
		//draw(x);
	}
}
//---------------------------------------------------------------------------------------









/* //===================================================================================*
* //                                                                                    *
* // отрисовка картинки																	*
* //------------------------------------------------------------------------------------*
*///
void ADisplay :: draw(const int index)
{
	if (graphics)
	{
		for (int i = 0; i < 8; i++)
		{
			const BYTE data = pgm_read_byte(&(displayFonts[index][i]));
			graphics->setLine(i, data);
		}
	}
}
//---------------------------------------------------------------------------------------






/* //===================================================================================*
* //                                                                                    *
* // Обработка команды power															*
* //------------------------------------------------------------------------------------*
*///
/*
void ADisplay :: execute(const int argc, char * const argv[], AStream *stream)
{

}
*/
//---------------------------------------------------------------------------------------










